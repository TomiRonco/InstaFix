#!/usr/bin/env python3
"""
Script para crear el instalador ejecutable de InstaFix
Genera un ejecutable standalone que incluye todas las dependencias
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_pyinstaller():
    """Verificar si PyInstaller est√° instalado"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller encontrado")
        return True
    except ImportError:
        print("‚ùå PyInstaller no encontrado")
        print("Instalando PyInstaller...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"])
        return True

def clean_build_dirs():
    """Limpiar directorios de build anteriores"""
    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"üßπ Limpiado: {dir_name}")

def create_pyinstaller_spec(platform="macos"):
    """Crear archivo .spec para PyInstaller seg√∫n la plataforma"""
    
    # Configuraci√≥n espec√≠fica por plataforma
    if platform == "windows":
        executable_name = 'InstaFix.exe'
        icon_path = 'assets/icon.ico' if os.path.exists('assets/icon.ico') else None
        console_mode = False
    else:  # macOS/Linux
        executable_name = 'InstaFix'
        icon_path = 'assets/icon.png' if os.path.exists('assets/icon.png') else None
        console_mode = False
    
    spec_content = f'''
# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=['{os.getcwd()}'],
    binaries=[],
    datas=[
        ('assets', 'assets'),
        ('.env.example', '.'),
        ('requirements.txt', '.'),
    ],
    hiddenimports=[
        'tkinter',
        'tkinter.ttk',
        'ttkbootstrap',
        'reportlab',
        'reportlab.pdfgen',
        'reportlab.lib',
        'sqlite3',
        'webbrowser',
        'urllib.parse',
        'PIL',
        'PIL.Image',
        'PIL.ImageTk',
        'requests',
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='{executable_name}',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console={console_mode},
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='{icon_path}' if {icon_path is not None} else None,
)
'''
    
    with open('InstaFix.spec', 'w') as f:
        f.write(spec_content)
    print("‚úÖ Archivo InstaFix.spec creado")

def build_executable():
    """Construir el ejecutable usando PyInstaller"""
    print("üî® Construyendo ejecutable...")
    
    # Ejecutar PyInstaller con el archivo .spec
    result = subprocess.run([
        sys.executable, '-m', 'PyInstaller',
        '--clean',
        '--noconfirm',
        'InstaFix.spec'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ Ejecutable creado exitosamente")
        return True
    else:
        print("‚ùå Error al crear ejecutable:")
        print(result.stdout)
        print(result.stderr)
        return False

def create_installer_package():
    """Crear paquete de instalaci√≥n con archivos adicionales"""
    package_dir = Path("InstaFix_Installer")
    
    # Crear directorio del instalador
    if package_dir.exists():
        shutil.rmtree(package_dir)
    package_dir.mkdir()
    
    # Copiar ejecutable
    exe_source = Path("dist/InstaFix.exe" if sys.platform == "win32" else "dist/InstaFix")
    exe_dest = package_dir / exe_source.name
    
    if exe_source.exists():
        shutil.copy2(exe_source, exe_dest)
        print(f"‚úÖ Ejecutable copiado a {exe_dest}")
    else:
        print("‚ùå No se encontr√≥ el ejecutable")
        return False
    
    # Copiar archivos de configuraci√≥n
    config_files = ['.env.example', 'requirements.txt']
    for file in config_files:
        if os.path.exists(file):
            shutil.copy2(file, package_dir / file)
            print(f"‚úÖ {file} copiado")
    
    # Crear README de instalaci√≥n
    readme_content = """# InstaFix - Instalaci√≥n

## Instrucciones de Instalaci√≥n

1. **Ejecutar la aplicaci√≥n:**
   - Ejecuta el archivo `InstaFix.exe` (Windows) o `InstaFix` (Mac/Linux)
   - La primera vez puede tardar un poco en iniciar

2. **Configuraci√≥n inicial:**
   - Copia el archivo `.env.example` como `.env`
   - Edita el archivo `.env` con los datos de tu negocio:
     ```
     BUSINESS_NAME=Tu Nombre del Negocio
     BUSINESS_ADDRESS=Tu Direcci√≥n
     BUSINESS_PHONE=Tu Tel√©fono
     BUSINESS_MOBILE=Tu Celular
     BUSINESS_EMAIL=tu@email.com
     ```

3. **Primera ejecuci√≥n:**
   - Al ejecutar por primera vez, se crear√° autom√°ticamente la base de datos
   - La aplicaci√≥n estar√° lista para usar

## Caracter√≠sticas

- ‚úÖ Gesti√≥n completa de reparaciones
- ‚úÖ Generaci√≥n de PDFs profesionales
- ‚úÖ Integraci√≥n con WhatsApp Web
- ‚úÖ Interface moderna y responsive
- ‚úÖ Base de datos SQLite integrada
- ‚úÖ Sin necesidad de instalar Python

## Soporte

Para soporte t√©cnico o reportar problemas:
- GitHub: https://github.com/TomiRonco/InstaFix
- Email: soporte@instafix.com

## Versi√≥n

Versi√≥n: 1.0.0
Fecha: 2025-09-24
"""
    
    with open(package_dir / "README.md", 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print("‚úÖ Paquete de instalaci√≥n creado en:", package_dir.absolute())
    return True

def main():
    """Funci√≥n principal del script de build"""
    print("üöÄ InstaFix - Generador de Instalador")
    print("=" * 50)
    
    # Verificar que estamos en el directorio correcto
    if not os.path.exists('main.py'):
        print("‚ùå Error: Ejecuta este script desde el directorio ra√≠z de InstaFix")
        sys.exit(1)
    
    try:
        # Paso 1: Verificar PyInstaller
        if not check_pyinstaller():
            print("‚ùå No se pudo instalar PyInstaller")
            sys.exit(1)
        
        # Paso 2: Limpiar builds anteriores
        clean_build_dirs()
        
        # Paso 3: Crear archivo .spec
        create_spec_file()
        
        # Paso 4: Construir ejecutable
        if not build_executable():
            print("‚ùå Fall√≥ la construcci√≥n del ejecutable")
            sys.exit(1)
        
        # Paso 5: Crear paquete de instalaci√≥n
        if not create_installer_package():
            print("‚ùå Fall√≥ la creaci√≥n del paquete")
            sys.exit(1)
        
        print("\nüéâ ¬°Instalador creado exitosamente!")
        print(f"üìÅ Ubicaci√≥n: {Path('InstaFix_Installer').absolute()}")
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Comprime la carpeta 'InstaFix_Installer'")
        print("2. Distribuye el archivo comprimido")
        print("3. Los usuarios solo necesitan extraer y ejecutar")
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()